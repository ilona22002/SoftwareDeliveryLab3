name: Label & comment issues #the name of the workflow
on: # This action will trigger when an issue is reopened or opened.
  issues:
    types:
      - reopened
      - opened
      - closed
      - pull_request_target
  pull_request:
    types:
      - opened
jobs: # The jobs that run in this workflow
  label_issues: # the first job is named as label_issues
    runs-on: ubuntu-latest # This job will run on the latest version of Ubuntu.
    permissions: # This job requires write access to issues in order to add labels and comment.
      issues: write
    if: github.event_name == 'issues' && github.event.action == 'opened' # Condition to run this job only when an issue is opened

    steps: # The "steps" section contains the individual tasks that will be performed in this job.
      - name: attach label to issues # The name of the step
        uses: actions/github-script@v6 # This step uses the "actions/github-script" action to execute a script that adds labels to the issue.
        with:
          script: | # The script calls the GitHub REST API to add labels to the issue.
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["issue", "fix"]
            })
      - name: Comment on new issue #this is another step that comments on the issue 
        uses: peter-evans/create-or-update-comment@v1 # This step uses the "peter-evans/create-or-update-comment" action to create or update a comment on the issue.
        with:
          issue-number: ${{ github.event.issue.number }} # The issue number is obtained from the context of the event that triggered the action.
          body: | # The body of the comment is a message thanking the user for opening the issue.
           Thanks for opening this issue! We'll take a look as soon as possible.

# Comment on when an issue is closed
  comment_on_closed_issue: # Add a new job for commenting on closed issues
    runs-on: ubuntu-latest
    permissions:
      issues: write
    if: github.event_name == 'issues' && github.event.action == 'closed' # Condition to run this job only when an issue is closed
    steps:
      - name: Comment on closed issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'This issue has been closed. Thank you for your contribution!'
            })
# Comment on when an users opens the first pull request 
  congratulate_first_pull_request:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: github.event_name == 'pull_request' && github.event.action == 'opened' && github.event.pull_request.user.login == github.actor
    steps:
      - name: Comment on first pull request
        uses: actions/github-script@v6
        with:
          script: |
            // Get a list of all issues created by the PR opener
            // See: https://octokit.github.io/rest.js/#pagination
            const creator = context.payload.sender.login
            const opts = github.rest.issues.listForRepo.endpoint.merge({
              ...context.issue,
              creator,
              state: 'all'
            })
            const issues = await github.paginate(opts)

            for (const issue of issues) {
              if (issue.number === context.issue.number) {
                continue
              }

              if (issue.pull_request) {
                return // Creator is already a contributor.
              }
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**Welcome**, new contributor!

                Please make sure you've read our [contributing guide](CONTRIBUTING.md) and we look forward to reviewing your Pull request shortly âœ¨`
            })
